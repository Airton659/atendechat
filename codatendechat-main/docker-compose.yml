version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - STACK_NAME=${STACK_NAME}
        - ENABLE_FINANCIAL=${ENABLE_FINANCIAL:-false}
        - GERENCIANET_PIX_CERT=${GERENCIANET_PIX_CERT:-production-cert}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      - BACKEND_URL=${BACKEND_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - ENABLE_FINANCIAL=${ENABLE_FINANCIAL:-false}
      - GERENCIANET_SANDBOX=${GERENCIANET_SANDBOX:-false}
      - GERENCIANET_PIX_CERT=${GERENCIANET_PIX_CERT:-production-cert}
      - GERENCIANET_CLIENT_ID=${GERENCIANET_CLIENT_ID}
      - GERENCIANET_CLIENT_SECRET=${GERENCIANET_CLIENT_SECRET}
      - GERENCIANET_PIX_KEY=${GERENCIANET_PIX_KEY}
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - REACT_APP_BACKEND_URL=${BACKEND_URL}
        - REACT_APP_HOURS_CLOSE_TICKETS_AUTO=24
        - STACK_NAME=${STACK_NAME}
        - REACT_APP_COLOR=${COLOR}
        - REACT_APP_TAB_NAME=${TAB_NAME}
    ports:
      - "${FRONTEND_PORT:-3001}:3001"
    depends_on:
      - backend
    networks:
      - app-network

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=codatende
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 